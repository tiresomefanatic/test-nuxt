import{r as i,a1 as f}from"./C7abP_sL.js";const p=()=>{const s=i(!1),n=i(null),r=i(null),c=i(!1),u=f(),g=()=>{const t=localStorage.getItem("github_token");t&&(n.value=t,s.value=!0)},h=()=>{try{const t=u.public.githubClientId;if(console.log("Client ID available:",!!t),!t)throw new Error("GitHub client ID is not configured");const l=Math.random().toString(36).substring(7);localStorage.setItem("github_oauth_state",l);const a=u.public.siteUrl;console.log("Base URL:",a);const o=new URL("/auth/callback",a).toString();console.log("Callback URL:",o);const e=new URL("https://github.com/login/oauth/authorize");e.searchParams.set("client_id",t),e.searchParams.set("redirect_uri",o),e.searchParams.set("scope","repo user"),e.searchParams.set("state",l),e.searchParams.set("response_type","code"),console.log("Redirecting to GitHub:",e.toString()),window.location.href=e.toString()}catch(t){console.error("Error initiating GitHub login:",t),r.value=t instanceof Error?t.message:"Failed to initiate GitHub login"}},b=async(t,l)=>{try{c.value=!0,r.value=null;const a=localStorage.getItem("github_oauth_state");if(!a||a!==l)throw new Error("Invalid state parameter");const o=await fetch("/api/auth/token",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({code:t})});if(!o.ok){const m=await o.json();throw new Error(m.message||"Failed to exchange code for token")}const e=await o.json();localStorage.setItem("github_access_token",e.access_token),n.value=e.access_token,s.value=!0,localStorage.removeItem("github_oauth_state")}catch(a){console.error("Error handling callback:",a),r.value=a instanceof Error?a.message:"Authentication failed",s.value=!1,n.value=null}finally{c.value=!1}},d=()=>{localStorage.removeItem("github_access_token"),n.value=null,s.value=!1};return g(),{isAuthenticated:s,accessToken:n,error:r,loading:c,initiateLogin:h,handleCallback:b,logout:d}};export{p as u};
